name: ubuntu20.04_tag

on:
  push:
    tags:
      - "20*"

jobs:
  build:
    runs-on: "ubuntu-latest"
    container:
      image: "ubuntu:20.04"
      options: --privileged

    steps:
      - name: "set APT to non-interactive"
        shell: bash
        run: "echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections"
      - name: "Update APT"
        shell: bash
        run: "apt update"
      - name: "Install git"
        shell: bash
        run: "apt-get install -y git"
      - name: "Install curl"
        shell: bash
        run: "apt-get install -y curl"
      - name: "Update APT"
        shell: bash
        run: "apt update"
      - name: "Ensure /run/sshd exists"
        shell: bash
        run: "mkdir -p /run/sshd"
      - name: "Install openssh-server"
        shell: bash
        run: "apt-get install -y openssh-server"
      - name: "Workaround git permissions issue"
        shell: bash
        run: "git config --global --add safe.directory /__w/wezterm/wezterm"
      - name: "checkout repo"
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: "Install Rust"
        uses: dtolnay/rust-toolchain@stable
      - name: "Cache cargo"
        uses: Swatinem/rust-cache@v2
        with:
          key: "ubuntu20.04-None-2-${{ runner.os }}-cargo"
      - name: "Install System Deps"
        shell: bash
        run: "env CI=yes PATH=$PATH ./get-deps"
      - name: "Build (Release mode)"
        shell: bash
        run: "cargo build --all --release"
      - name: "Install cargo-nextest from Cargo"
        uses: baptiste0928/cargo-install@v2
        with:
          crate: "cargo-nextest"
          cache-key: "ubuntu20.04"
      - name: "Test (Release mode)"
        shell: bash
        run: "cargo nextest run --all --release --no-fail-fast"
      - name: "Package"
        shell: bash
        run: "bash ci/deploy.sh"
      - name: "Install libfuse2"
        shell: bash
        run: "apt-get install -y libfuse2"
      - name: "Source Tarball"
        shell: bash
        run: "bash ci/source-archive.sh"
      - name: "Build AppImage"
        shell: bash
        run: "bash ci/appimage.sh"
      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: "ubuntu20.04"
          path: |
            wezterm-*.deb
            wezterm-*.xz
            *src.tar.gz
            *.AppImage
            *.zsync
      - name: "Checkout linuxbrew tap"
        uses: actions/checkout@v4
        with:
          repository: "wez/homebrew-wezterm-linuxbrew"
          path: "linuxbrew-wezterm"
          token: "${{ secrets.GH_PAT }}"
      - name: "Update linuxbrew tap formula"
        shell: bash
        run: "cp wezterm-linuxbrew.rb linuxbrew-wezterm/Formula/wezterm.rb"
      - name: "Commit linuxbrew tap changes"
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Automated update to match latest tag"
          repository: "linuxbrew-wezterm"

  upload:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: "Workaround git permissions issue"
        shell: bash
        run: "git config --global --add safe.directory /__w/wezterm/wezterm"
      - name: "checkout repo"
        uses: actions/checkout@v4
      - name: "Download artifact"
        uses: actions/download-artifact@v3
        with:
          name: "ubuntu20.04"
      - name: "Checksum"
        shell: bash
        run: "for f in wezterm-*.deb wezterm-*.xz *src.tar.gz *.AppImage *.zsync ; do sha256sum $f > $f.sha256 ; done"
      - name: "Create pre-release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
      - name: "Upload to Tagged Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) wezterm-*.deb wezterm-*.xz *src.tar.gz *.AppImage *.zsync *.sha256"
      - name: "Checkout flathub/org.wezfurlong.wezterm"
        uses: actions/checkout@v4
        with:
          repository: "flathub/org.wezfurlong.wezterm"
          path: "flathub"
          token: "${{ secrets.GH_PAT }}"
      - name: "Create flathub commit and push"
        shell: bash
        run: "bash ci/make-flathub-pr.sh"
      - name: "Submit PR"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: 'cd flathub && gh pr create --fill --body "PR automatically created by release automation in the wezterm repo"'
